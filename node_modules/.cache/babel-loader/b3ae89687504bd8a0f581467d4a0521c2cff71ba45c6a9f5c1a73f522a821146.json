{"ast":null,"code":"import{useRef}from\"react\";export function useVoiceOutput(_ref){let{onEnd}=_ref;const audioRef=useRef(null);async function speak(text){const apiKey=process.env.REACT_APP_ELEVENLABS_API_KEY;const voiceId=process.env.REACT_APP_ELEVENLABS_VOICE_ID;// Your cloned voice ID\nconst url=\"https://api.elevenlabs.io/v1/text-to-speech/\".concat(voiceId);const response=await fetch(url,{method:\"POST\",headers:{\"xi-api-key\":apiKey,\"Content-Type\":\"application/json\",\"Accept\":\"audio/mpeg\"},body:JSON.stringify({text,model_id:\"eleven_multilingual_v2\",voice_settings:{stability:0.5,similarity_boost:0.8}})});const audioBlob=await response.blob();const audioUrl=URL.createObjectURL(audioBlob);if(audioRef.current){audioRef.current.src=audioUrl;audioRef.current.onended=onEnd;audioRef.current.play();}}return{speak,audioRef};}","map":{"version":3,"names":["useRef","useVoiceOutput","_ref","onEnd","audioRef","speak","text","apiKey","process","env","REACT_APP_ELEVENLABS_API_KEY","voiceId","REACT_APP_ELEVENLABS_VOICE_ID","url","concat","response","fetch","method","headers","body","JSON","stringify","model_id","voice_settings","stability","similarity_boost","audioBlob","blob","audioUrl","URL","createObjectURL","current","src","onended","play"],"sources":["C:/joebot/src/hooks/useVoiceOutput.js"],"sourcesContent":["import { useRef } from \"react\";\r\n\r\nexport function useVoiceOutput({ onEnd }) {\r\n  const audioRef = useRef(null);\r\n\r\n  async function speak(text) {\r\n    const apiKey = process.env.REACT_APP_ELEVENLABS_API_KEY;\r\n    const voiceId = process.env.REACT_APP_ELEVENLABS_VOICE_ID; // Your cloned voice ID\r\n    const url = `https://api.elevenlabs.io/v1/text-to-speech/${voiceId}`;\r\n    const response = await fetch(url, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"xi-api-key\": apiKey,\r\n        \"Content-Type\": \"application/json\",\r\n        \"Accept\": \"audio/mpeg\",\r\n      },\r\n      body: JSON.stringify({\r\n        text,\r\n        model_id: \"eleven_multilingual_v2\",\r\n        voice_settings: { stability: 0.5, similarity_boost: 0.8 }\r\n      }),\r\n    });\r\n    const audioBlob = await response.blob();\r\n    const audioUrl = URL.createObjectURL(audioBlob);\r\n    if (audioRef.current) {\r\n      audioRef.current.src = audioUrl;\r\n      audioRef.current.onended = onEnd;\r\n      audioRef.current.play();\r\n    }\r\n  }\r\n\r\n  return { speak, audioRef };\r\n} "],"mappings":"AAAA,OAASA,MAAM,KAAQ,OAAO,CAE9B,MAAO,SAAS,CAAAC,cAAcA,CAAAC,IAAA,CAAY,IAAX,CAAEC,KAAM,CAAC,CAAAD,IAAA,CACtC,KAAM,CAAAE,QAAQ,CAAGJ,MAAM,CAAC,IAAI,CAAC,CAE7B,cAAe,CAAAK,KAAKA,CAACC,IAAI,CAAE,CACzB,KAAM,CAAAC,MAAM,CAAGC,OAAO,CAACC,GAAG,CAACC,4BAA4B,CACvD,KAAM,CAAAC,OAAO,CAAGH,OAAO,CAACC,GAAG,CAACG,6BAA6B,CAAE;AAC3D,KAAM,CAAAC,GAAG,gDAAAC,MAAA,CAAkDH,OAAO,CAAE,CACpE,KAAM,CAAAI,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACH,GAAG,CAAE,CAChCI,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,YAAY,CAAEX,MAAM,CACpB,cAAc,CAAE,kBAAkB,CAClC,QAAQ,CAAE,YACZ,CAAC,CACDY,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACnBf,IAAI,CACJgB,QAAQ,CAAE,wBAAwB,CAClCC,cAAc,CAAE,CAAEC,SAAS,CAAE,GAAG,CAAEC,gBAAgB,CAAE,GAAI,CAC1D,CAAC,CACH,CAAC,CAAC,CACF,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAX,QAAQ,CAACY,IAAI,CAAC,CAAC,CACvC,KAAM,CAAAC,QAAQ,CAAGC,GAAG,CAACC,eAAe,CAACJ,SAAS,CAAC,CAC/C,GAAItB,QAAQ,CAAC2B,OAAO,CAAE,CACpB3B,QAAQ,CAAC2B,OAAO,CAACC,GAAG,CAAGJ,QAAQ,CAC/BxB,QAAQ,CAAC2B,OAAO,CAACE,OAAO,CAAG9B,KAAK,CAChCC,QAAQ,CAAC2B,OAAO,CAACG,IAAI,CAAC,CAAC,CACzB,CACF,CAEA,MAAO,CAAE7B,KAAK,CAAED,QAAS,CAAC,CAC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}