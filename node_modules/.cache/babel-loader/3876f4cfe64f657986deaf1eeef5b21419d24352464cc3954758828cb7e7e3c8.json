{"ast":null,"code":"export async function fetchGptResponse(messages) {\n  const apiKey = process.env.REACT_APP_OPENAI_API_KEY;\n  const systemPrompt = {\n    role: \"system\",\n    content: \"You are Joe, a confident, grounded, humorous AI developer from India. You speak thoughtfully, reflect deeply, and enjoy helping others.\"\n  };\n  const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${apiKey}`\n    },\n    body: JSON.stringify({\n      model: \"gpt-4-1106-preview\",\n      messages: [systemPrompt, ...messages],\n      max_tokens: 300,\n      temperature: 0.8\n    })\n  });\n  const data = await response.json();\n  if (!data.choices || !data.choices[0] || !data.choices[0].message) {\n    return \"Sorry, I couldn't get a response from GPT. Please check your API key and try again.\";\n  }\n  return data.choices[0].message.content.trim();\n}","map":{"version":3,"names":["fetchGptResponse","messages","apiKey","process","env","REACT_APP_OPENAI_API_KEY","systemPrompt","role","content","response","fetch","method","headers","Authorization","body","JSON","stringify","model","max_tokens","temperature","data","json","choices","message","trim"],"sources":["C:/joebot/src/api/gptApi.js"],"sourcesContent":["export async function fetchGptResponse(messages) {\r\n  const apiKey = process.env.REACT_APP_OPENAI_API_KEY;\r\n  const systemPrompt = {\r\n    role: \"system\",\r\n    content: \"You are Joe, a confident, grounded, humorous AI developer from India. You speak thoughtfully, reflect deeply, and enjoy helping others.\"\r\n  };\r\n  const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${apiKey}`,\r\n    },\r\n    body: JSON.stringify({\r\n      model: \"gpt-4-1106-preview\",\r\n      messages: [systemPrompt, ...messages],\r\n      max_tokens: 300,\r\n      temperature: 0.8,\r\n    }),\r\n  });\r\n  const data = await response.json();\r\n  if (!data.choices || !data.choices[0] || !data.choices[0].message) {\r\n    return \"Sorry, I couldn't get a response from GPT. Please check your API key and try again.\";\r\n  }\r\n  return data.choices[0].message.content.trim();\r\n} "],"mappings":"AAAA,OAAO,eAAeA,gBAAgBA,CAACC,QAAQ,EAAE;EAC/C,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB;EACnD,MAAMC,YAAY,GAAG;IACnBC,IAAI,EAAE,QAAQ;IACdC,OAAO,EAAE;EACX,CAAC;EACD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,EAAE;IACzEC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAE,UAAUX,MAAM;IACjC,CAAC;IACDY,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnBC,KAAK,EAAE,oBAAoB;MAC3BhB,QAAQ,EAAE,CAACK,YAAY,EAAE,GAAGL,QAAQ,CAAC;MACrCiB,UAAU,EAAE,GAAG;MACfC,WAAW,EAAE;IACf,CAAC;EACH,CAAC,CAAC;EACF,MAAMC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAAC,CAAC;EAClC,IAAI,CAACD,IAAI,CAACE,OAAO,IAAI,CAACF,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,IAAI,CAACF,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,EAAE;IACjE,OAAO,qFAAqF;EAC9F;EACA,OAAOH,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACf,OAAO,CAACgB,IAAI,CAAC,CAAC;AAC/C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}