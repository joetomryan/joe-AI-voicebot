{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nimport { fetchGptResponse } from \"../api/gptApi\";\nexport function useDialogueLoop({\n  speak,\n  onBotMessage,\n  setListening\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const handleUserSpeech = useCallback(async userText => {\n    setMessages(msgs => [...msgs, {\n      role: \"user\",\n      content: userText\n    }]);\n    onBotMessage({\n      role: \"user\",\n      content: userText\n    });\n    setListening(false);\n    const botText = await fetchGptResponse([...messages, {\n      role: \"user\",\n      content: userText\n    }]);\n    setMessages(msgs => [...msgs, {\n      role: \"assistant\",\n      content: botText\n    }]);\n    onBotMessage({\n      role: \"assistant\",\n      content: botText\n    });\n    await speak(botText);\n    setListening(true);\n  }, [messages, speak, onBotMessage, setListening]);\n  return {\n    handleUserSpeech\n  };\n}\n_s(useDialogueLoop, \"ZTQzs6uB4I9oKs6SmLXuIOY12zs=\");","map":{"version":3,"names":["useState","useCallback","fetchGptResponse","useDialogueLoop","speak","onBotMessage","setListening","_s","messages","setMessages","handleUserSpeech","userText","msgs","role","content","botText"],"sources":["C:/joebot/src/hooks/useDialogueLoop.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\r\nimport { fetchGptResponse } from \"../api/gptApi\";\r\n\r\nexport function useDialogueLoop({ speak, onBotMessage, setListening }) {\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const handleUserSpeech = useCallback(async (userText) => {\r\n    setMessages(msgs => [...msgs, { role: \"user\", content: userText }]);\r\n    onBotMessage({ role: \"user\", content: userText });\r\n    setListening(false);\r\n    const botText = await fetchGptResponse([...messages, { role: \"user\", content: userText }]);\r\n    setMessages(msgs => [...msgs, { role: \"assistant\", content: botText }]);\r\n    onBotMessage({ role: \"assistant\", content: botText });\r\n    await speak(botText);\r\n    setListening(true);\r\n  }, [messages, speak, onBotMessage, setListening]);\r\n\r\n  return { handleUserSpeech };\r\n} "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,gBAAgB,QAAQ,eAAe;AAEhD,OAAO,SAASC,eAAeA,CAAC;EAAEC,KAAK;EAAEC,YAAY;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EACrE,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMU,gBAAgB,GAAGT,WAAW,CAAC,MAAOU,QAAQ,IAAK;IACvDF,WAAW,CAACG,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEH;IAAS,CAAC,CAAC,CAAC;IACnEN,YAAY,CAAC;MAAEQ,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEH;IAAS,CAAC,CAAC;IACjDL,YAAY,CAAC,KAAK,CAAC;IACnB,MAAMS,OAAO,GAAG,MAAMb,gBAAgB,CAAC,CAAC,GAAGM,QAAQ,EAAE;MAAEK,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEH;IAAS,CAAC,CAAC,CAAC;IAC1FF,WAAW,CAACG,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;MAAEC,IAAI,EAAE,WAAW;MAAEC,OAAO,EAAEC;IAAQ,CAAC,CAAC,CAAC;IACvEV,YAAY,CAAC;MAAEQ,IAAI,EAAE,WAAW;MAAEC,OAAO,EAAEC;IAAQ,CAAC,CAAC;IACrD,MAAMX,KAAK,CAACW,OAAO,CAAC;IACpBT,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC,EAAE,CAACE,QAAQ,EAAEJ,KAAK,EAAEC,YAAY,EAAEC,YAAY,CAAC,CAAC;EAEjD,OAAO;IAAEI;EAAiB,CAAC;AAC7B;AAACH,EAAA,CAfeJ,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}