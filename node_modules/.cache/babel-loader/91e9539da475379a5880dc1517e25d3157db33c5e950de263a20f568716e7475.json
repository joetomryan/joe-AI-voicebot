{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nimport { fetchGptResponse } from \"../api/gptApi\";\nexport function useDialogueLoop({\n  speak,\n  onBotMessage\n}) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [listening, setListening] = useState(false);\n  const handleUserSpeech = useCallback(async userText => {\n    setMessages(msgs => [...msgs, {\n      role: \"user\",\n      content: userText\n    }]);\n    onBotMessage({\n      role: \"user\",\n      content: userText\n    });\n    setListening(false);\n    const botText = await fetchGptResponse([...messages, {\n      role: \"user\",\n      content: userText\n    }]);\n    setMessages(msgs => [...msgs, {\n      role: \"assistant\",\n      content: botText\n    }]);\n    onBotMessage({\n      role: \"assistant\",\n      content: botText\n    });\n    await speak(botText);\n    setListening(true);\n  }, [messages, speak, onBotMessage]);\n  return {\n    listening,\n    setListening,\n    handleUserSpeech\n  };\n}\n_s(useDialogueLoop, \"1vEuN4BOsFI7MDD/OlABPMQcQrY=\");","map":{"version":3,"names":["useState","useCallback","fetchGptResponse","useDialogueLoop","speak","onBotMessage","_s","messages","setMessages","listening","setListening","handleUserSpeech","userText","msgs","role","content","botText"],"sources":["C:/joebot/src/hooks/useDialogueLoop.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\r\nimport { fetchGptResponse } from \"../api/gptApi\";\r\n\r\nexport function useDialogueLoop({ speak, onBotMessage }) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [listening, setListening] = useState(false);\r\n\r\n  const handleUserSpeech = useCallback(async (userText) => {\r\n    setMessages(msgs => [...msgs, { role: \"user\", content: userText }]);\r\n    onBotMessage({ role: \"user\", content: userText });\r\n    setListening(false);\r\n    const botText = await fetchGptResponse([...messages, { role: \"user\", content: userText }]);\r\n    setMessages(msgs => [...msgs, { role: \"assistant\", content: botText }]);\r\n    onBotMessage({ role: \"assistant\", content: botText });\r\n    await speak(botText);\r\n    setListening(true);\r\n  }, [messages, speak, onBotMessage]);\r\n\r\n  return { listening, setListening, handleUserSpeech };\r\n} "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C,SAASC,gBAAgB,QAAQ,eAAe;AAEhD,OAAO,SAASC,eAAeA,CAAC;EAAEC,KAAK;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EACvD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMW,gBAAgB,GAAGV,WAAW,CAAC,MAAOW,QAAQ,IAAK;IACvDJ,WAAW,CAACK,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;MAAEC,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEH;IAAS,CAAC,CAAC,CAAC;IACnEP,YAAY,CAAC;MAAES,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEH;IAAS,CAAC,CAAC;IACjDF,YAAY,CAAC,KAAK,CAAC;IACnB,MAAMM,OAAO,GAAG,MAAMd,gBAAgB,CAAC,CAAC,GAAGK,QAAQ,EAAE;MAAEO,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEH;IAAS,CAAC,CAAC,CAAC;IAC1FJ,WAAW,CAACK,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;MAAEC,IAAI,EAAE,WAAW;MAAEC,OAAO,EAAEC;IAAQ,CAAC,CAAC,CAAC;IACvEX,YAAY,CAAC;MAAES,IAAI,EAAE,WAAW;MAAEC,OAAO,EAAEC;IAAQ,CAAC,CAAC;IACrD,MAAMZ,KAAK,CAACY,OAAO,CAAC;IACpBN,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC,EAAE,CAACH,QAAQ,EAAEH,KAAK,EAAEC,YAAY,CAAC,CAAC;EAEnC,OAAO;IAAEI,SAAS;IAAEC,YAAY;IAAEC;EAAiB,CAAC;AACtD;AAACL,EAAA,CAhBeH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}